#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2010 (ita)

VERSION='0.0.1'
APPNAME='cxx_test'

top = '.'
out = 'build'

def options(opt):
	opt.load('compiler_cxx')

def build(bld):
	bld.fatal('no build here, only the configuration is interesting')

def configure(conf):
	conf.load('compiler_cxx')
	conf.multicheck(
		{'header_name':'stdio.h'},
		{'header_name':'unistd.h'},
		{'header_name':'stdlib.h'}
	)

# the details below
# ------------------------------------------------------------------------

from waflib import Task, Options
from waflib.Build import BuildContext
from waflib.Runner import Parallel
from waflib.Task import TaskBase
from waflib.Configure import conf

import logging
from logging.handlers import MemoryHandler
def make_logger(name, to_log):
	"""
	create a memory logger to avoid writing concurrently to the main logger
	"""
	logger = logging.getLogger(name)
	hdlr = MemoryHandler(10000, target=to_log)
	formatter = logging.Formatter('%(message)s')
	hdlr.setFormatter(formatter)
	logger.addHandler(hdlr)
	logger.memhandler = hdlr
	logger.setLevel(logging.DEBUG)
	return logger

class cfgtask(TaskBase):
	"""
	A task that executes configuration tests
	make sure that the checks write to conf.env in a thread-safe manner

	for the moment it only executes conf.check
	"""
	def display(self):
		return ''

	def runnable_status(self):
		return Task.RUN_ME

	def run(self):
		conf = self.conf
		bld = BuildContext(top_dir=conf.srcnode.abspath(), out_dir=conf.bldnode.abspath())
		bld.env = conf.env
		bld.init_dirs()
		bld.in_msg = 1 # suppress top-level start_msg
		bld.logger = self.logger
		bld.check(**self.args)

@conf
def multicheck(self, *k, **kw):
	"""
	use tuples to perform parallel configuration tests
	"""
	self.start_msg('Executing %d configuration tests' % len(k))

	class fu(object):
		def __init__(self):
			self.keep = False
			self.cache_global = Options.cache_global
			self.nocache = Options.options.nocache
		def total(self):
			return len(tasks)
		def to_log(self, *k, **kw):
			return

	bld = fu()
	tasks = []
	for dct in k:
		x = cfgtask(bld=bld)
		tasks.append(x)
		x.args = dct
		x.bld = bld
		x.conf = self
		x.args = dct

		# bind a logger that will keep the info in memory
		x.logger = make_logger(str(id(x)), self.logger)

	def it():
		yield tasks
		while 1:
			yield []
	p = Parallel(bld, Options.options.jobs)
	p.biter = it()
	p.start()

	# flush the logs in order into the config.log
	for x in tasks:
		x.logger.memhandler.flush()

	for x in tasks:
		if x.hasrun != Task.SUCCESS:
			self.end_msg('no')
			self.fatal(kw.get('errmsg', None) or 'One of the tests has failed, see the config.log for more information')

	self.end_msg('ok')

